name: Get Previous Commits SHAs
on:
  push:
    branches:
      - main
    paths:
      - "**/previous-commit*.yaml"

jobs:
  get-previous-shas:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # gets all the commit history for all branches and tags
      - name: Get current commit SHA
        run: |
          echo "Current commit SHA: $GITHUB_SHA"
      - name: Count commits and get SHAs
        if: success()
        run: |
          # Compte le nombre de commits dans l'historique
          COMMIT_COUNT=$(git rev-list --count HEAD)
          echo "Total number of commits: $COMMIT_COUNT"

          # Vérifie si il y a assez de commits
          if [ "$COMMIT_COUNT" >= 4 ]; then
              PREVIOUS_SHA=$(git rev-parse HEAD~1)  # 1 commit précédent
              TWO_COMMITS_BEFORE_SHA=$(git rev-parse HEAD~2)  # 2 commits précédents
              THREE_COMMITS_BEFORE_SHA=$(git rev-parse HEAD~3)  # 3 commits précédents

              echo "Previous commit SHA: $PREVIOUS_SHA"
              echo "SHA of two commits before: $TWO_COMMITS_BEFORE_SHA"
              echo "SHA of three commits before: $THREE_COMMITS_BEFORE_SHA"

              # Stocker les SHAs dans des variables d'environnement
              echo "PREVIOUS_SHA=$PREVIOUS_SHA" >> $GITHUB_ENV
              echo "Previous SHA env: ${{ env.PREVIOUS_SHA }}"
              echo "TWO_COMMITS_BEFORE_SHA=$TWO_COMMITS_BEFORE_SHA" >> $GITHUB_ENV
              echo "THREE_COMMITS_BEFORE_SHA=$THREE_COMMITS_BEFORE_SHA" >> $GITHUB_ENV
          else
              echo "Not enough commits available."
              exit 1  # Échoue le job si pas assez de commits
          fi
          
      - name: First check
        run: |
          echo "Contents of workspace before first checkout:"
          ls -la ${{ github.workspace }}
          PROJECT_DIR=${{ github.workspace }}/project
          echo "PROJECT_DIR=$PROJECT_DIR" >> $GITHUB_ENV
          echo "Backup dir:"
          echo $PROJECT_DIR
          mkdir -p $PROJECT_DIR

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          path: ${{ env.PROJECT_DIR }}

      - name: Second check
        run: |
          echo "Contents of workspace after first checkout:"
          ls -la ${{ github.workspace }}
          echo "Contents of project dir:"
          ls -la ${{ env.PROJECT_DIR }}
          
      - name: Use previous commit SHA
        run: |
          echo "The SHA of the previous commit is:"
          echo ${{ env.PREVIOUS_SHA }}
      
      - name: Create backup directory
        run: |
          BACKUP_DIR=${{ github.workspace }}/backup
          echo "BACKUP_DIR=$BACKUP_DIR" >> $GITHUB_ENV
          echo "Backup dir:"
          echo $BACKUP_DIR
          mkdir -p $BACKUP_DIR

      - name: Backup previous commit
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          ref: ${{ env.PREVIOUS_SHA }}
          path: ${{ env.BACKUP_DIR }}

      - name: Check backup
        run: |
          echo "Contents of workspace:"
          ls -la ${{ github.workspace }}
          echo "Contents of $BACKUP_DIR:"
          ls -la ${{ env.BACKUP_DIR }}  # Affiche le contenu du répertoire de sauvegarde pour vérifier le clonage
          # Si le dépôt est cloné directement dans $BACKUP_DIR, accède-y pour vérifier le commit
          cd ${{ env.BACKUP_DIR }}
          echo "Current pwd:"
          pwd
          echo "Backup commit SHA:"
          git rev-parse HEAD  # Affiche le SHA du commit pour confirmation